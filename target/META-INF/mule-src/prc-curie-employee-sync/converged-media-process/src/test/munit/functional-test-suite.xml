<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:tls="http://www.mulesoft.org/schema/mule/tls"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd">
	<munit:config name="functional-test-suite.xml">
	<munit:parameterizations >
			<munit:parameterization name="main-flow" >
				<munit:parameters >
					<munit:parameter propertyName="GAM_22773096280.host" value="https://media-gam-integration-sapi.us-e2.cloudhub.io" />
					<munit:parameter propertyName="GAM_22773096280.port" value="443" />
					<munit:parameter propertyName="GAM_22773096280.basepath" value="/api" />
					<munit:parameter propertyName="GAM_22773096280.url.proposals" value="/api/proposal" />
					<munit:parameter propertyName="GAM_22773096280.url.performProposalAction" value="/api/proposal/action" />
					<munit:parameter propertyName="GAM_22773096280.url.proposalLineItems" value="/api/proposal/lineItems" />
					<munit:parameter propertyName="GAM_22773096280.url.proposalStatus" value="/proposal/statusQuery" />
				</munit:parameters>
			</munit:parameterization>
		</munit:parameterizations>
	</munit:config>
	<http:request-config name="HTTP_Request_configuration" doc:name="HTTP Request configuration" doc:id="553933a7-c05d-4c2a-88a7-897e2f9701ac" basePath="/api/">
		<http:request-connection protocol="HTTPS" host="localhost" port="${https.port}" connectionIdleTimeout="30000000">
			<tls:context >
				<tls:trust-store insecure="true" />
			</tls:context>
		</http:request-connection>
	</http:request-config>
	<munit:test name="post:\getProposalStatus-success-test" doc:id="a601451b-075a-405d-a83c-5c9b416a5ab0" >
		<munit:enable-flow-sources >
			<munit:enable-flow-source value="converged-media-process-main" />
			<munit:enable-flow-source value="post:\getProposalStatus:application\json:converged-media-process-config" />
		</munit:enable-flow-sources>
		<munit:behavior >
			<munit-tools:mock-when doc:name="Request SAPI" doc:id="7311ee3b-6758-460a-b3b6-28ab7771a50a" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Request Proposal" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="25046227-11c3-4965-8923-38c35065d419" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://getProposalStatusTest/getProposalStatus_sapi_response.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="mq:publish" doc:id="87811521-6d05-4494-83a4-42e0a77725bc" processor="anypoint-mq:publish">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Anypoint_MQ_Config" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="${forwardResponse.queue}" attributeName="destination" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<http:request method="POST" doc:name="Request" doc:id="503a7d1f-69e0-4ce6-a8d2-e57286b0f241" config-ref="HTTP_Request_configuration" path="/getProposalStatus" responseTimeout="1000000" >
				<http:body ><![CDATA[#[output application/json  --- readUrl('classpath://getProposalStatusTest/set-event_payload.dwl')]]]></http:body>
				<http:headers ><![CDATA[#[output application/java
---
{
	'ext-gam-auth-header' : "Bearer token"
}]]]></http:headers>
			</http:request>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="006e428f-cfb9-47a1-b49c-52c8f2889862" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getProposalStatusTest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="post:\getProposalStatus-invalid-adServers" doc:id="ea53e5dc-7bc9-4041-be4b-270067d4b570">
		<munit:enable-flow-sources >
			<munit:enable-flow-source value="converged-media-process-main" />
			<munit:enable-flow-source value="post:\getProposalStatus:application\json:converged-media-process-config" />
		</munit:enable-flow-sources>
		<munit:execution>
			<http:request method="POST" doc:name="Request" doc:id="82daaf55-67a6-4a6b-b997-1c639582a8b6" config-ref="HTTP_Request_configuration" path="/getProposalStatus" responseTimeout="1000000" >
				<http:body ><![CDATA[#[output application/json  --- readUrl('classpath://getProposalStatusTest/set-event_payload_invalid_adServer.dwl')]]]></http:body>
				<http:headers ><![CDATA[#[output application/java
---
{
	'ext-gam-auth-header' : "Bearer token"
}]]]></http:headers>
			</http:request>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="372f3a0e-ff2c-42f7-ba14-fb7c8c5c0e14" message="The payload does not match" >
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getProposalStatusTest::assert_expression_payload_invalid_adServer
---
assert_expression_payload_invalid_adServer::main({payload: payload})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="post:\getProposalStatus-sapi-unauthorized" doc:id="4479adeb-1f21-4cfa-9922-a5aaa83df5a3">
		<munit:enable-flow-sources >
			<munit:enable-flow-source value="converged-media-process-main" />
			<munit:enable-flow-source value="post:\getProposalStatus:application\json:converged-media-process-config" />
		</munit:enable-flow-sources>
		<munit:behavior >
			<munit-tools:mock-when doc:name="Request SAPI" doc:id="7f6e6657-a317-41fe-b683-58c32b61ee20" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Request Proposal" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="25046227-11c3-4965-8923-38c35065d419" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="HTTP:UNAUTHORIZED" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<http:request method="POST" doc:name="Request" doc:id="5a0c4fc5-831a-440d-8b2c-ba5a0d73814f" config-ref="HTTP_Request_configuration" path="/getProposalStatus" responseTimeout="1000000">
				<http:body ><![CDATA[#[output application/json  --- readUrl('classpath://getProposalStatusTest/set-event_payload.dwl')]]]></http:body>
				<http:headers ><![CDATA[#[output application/java
---
{
	'ext-gam-auth-header' : "Bearer token"
}]]]></http:headers>
			</http:request>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="8564d01a-c914-4cfa-8d15-fe5ac7325ee3" actual="#[payload.result.code]" expected="#[null]"/>
		</munit:validation>
	</munit:test>
	<munit:test name="post:\getProposalStatus-sapi-internal-server-error" doc:id="6f9b7c85-6408-4e1d-8df9-c9d0f4b7217a">
		<munit:enable-flow-sources >

			<munit:enable-flow-source value="post:\getProposalStatus:application\json:converged-media-process-config" />
			<munit:enable-flow-source value="converged-media-process-main" />
		</munit:enable-flow-sources>
		<munit:behavior >
			<munit-tools:mock-when doc:name="Request SAPI" doc:id="37e6e8b5-7100-4fac-b234-d6818aaaff43" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Request Proposal" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="25046227-11c3-4965-8923-38c35065d419" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="HTTP:INTERNAL_SERVER_ERROR" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<http:request method="POST" doc:name="Request" doc:id="2bb14047-9cc0-4eff-b35b-02b55fd11b3d" config-ref="HTTP_Request_configuration" path="/getProposalStatus" responseTimeout="1000000" >
				<http:body ><![CDATA[#[output application/json  --- readUrl('classpath://getProposalStatusTest/set-event_payload.dwl')]]]></http:body>
				<http:headers ><![CDATA[#[output application/java
---
{
	'ext-gam-auth-header' : "Bearer token"
}]]]></http:headers>
			</http:request>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="e665949a-8f3e-4961-a812-14a7d2122f99" actual="#[payload.result.code]" expected="#[null]" />
		</munit:validation>
	</munit:test>
	<munit:test name="converged-media-process-bad-request" doc:id="281cec99-c26a-41ad-b6ed-946576861f65">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock APIkit Router" doc:id="43ed17d7-f044-454d-b366-2173f7e863fc" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="8b46bcc1-8ea5-4806-a321-0d80eda7f83e" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://convergedmediaprocessmaintest/mock_payload.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:error typeId="APIKIT:BAD_REQUEST" />
					<munit-tools:variables >
						<munit-tools:variable key="request" value="#[output application/json --- readUrl('classpath://convergedmediaprocessmaintest/mock_variable_.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://convergedmediaprocessmaintest/mock_variable_1.dwl')]" />
						<munit-tools:variable key="httpStatus" value="#[readUrl('classpath://convergedmediaprocessmaintest/mock_variable_2.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="242e8f7b-dae8-4217-bd45-a373a3e9889d" >
				<munit:payload value="#[output application/json  --- readUrl('classpath://convergedmediaprocessmaintest/set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json " />
				<munit:attributes value="#[readUrl('classpath://convergedmediaprocessmaintest/set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<try doc:name="Try" doc:id="d3999bb2-5c41-4a43-a3a6-57f47225d2da" >
				<flow-ref doc:name="Flow-ref to converged-media-process-main" doc:id="251d0a63-e13b-4886-a9b0-f7e95fdd425d" name="converged-media-process-main" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="28319326-334b-4b53-9489-b320bc0b557f" >
						<ee:transform doc:name="Transform Message" doc:id="4f844c3f-664e-4204-9d3f-8b3a0133e660" >
							<ee:message >
								<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
							</ee:message>
						</ee:transform>
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="245f2174-b482-4830-9a6d-6c0730e8b417" actual="#[payload.result.shortMessage]" expected='#["BAD_REQUEST"]' message="The payload does not match"/>
		</munit:validation>
	</munit:test>
	<munit:test name="converged-media-process-not-found" doc:id="04c6a6aa-6793-406b-899e-e15ea7375e6e">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock APIkit Router" doc:id="ea54e2df-930a-46a9-9a34-b779213e78e9" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="8b46bcc1-8ea5-4806-a321-0d80eda7f83e" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://convergedmediaprocessmaintest/mock_payload.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:error typeId="APIKIT:NOT_FOUND" />
					<munit-tools:variables >
						<munit-tools:variable key="request" value="#[output application/json --- readUrl('classpath://convergedmediaprocessmaintest/mock_variable_.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://convergedmediaprocessmaintest/mock_variable_1.dwl')]" />
						<munit-tools:variable key="httpStatus" value="#[readUrl('classpath://convergedmediaprocessmaintest/mock_variable_2.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="37f5a7aa-a5ac-4844-95c8-a6bead6b46b8" >
				<munit:payload value="#[output application/json  --- readUrl('classpath://convergedmediaprocessmaintest/set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json " />
				<munit:attributes value="#[readUrl('classpath://convergedmediaprocessmaintest/set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<try doc:name="Try" doc:id="6b599396-c548-4026-8080-3c64d562c53c" >
				<flow-ref doc:name="Flow-ref to converged-media-process-main" doc:id="65b9852a-bae1-46b8-8322-eed1a9dcf91e" name="converged-media-process-main" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="cea36fd3-072f-4168-abab-a8e1b8f482c0" >
						<ee:transform doc:name="Transform Message" doc:id="9c10b2b2-0821-4d97-a52d-e12d32799aa6" >
							<ee:message >
								<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
							</ee:message>
						</ee:transform>
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="1b0a35e6-c667-4ceb-87b8-fbe49f4bf359" actual="#[payload.result.shortMessage]" expected='#["NOT_FOUND"]' message="The payload does not match"/>
		</munit:validation>
	</munit:test>
	<munit:test name="converged-media-process-unsupported-media-type" doc:id="de6354a8-db04-45c1-b612-a6bd62e9424a">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock APIkit Router" doc:id="8a7d3d87-af48-4947-8e86-0fe0429786c1" processor="apikit:router" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="8b46bcc1-8ea5-4806-a321-0d80eda7f83e" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://convergedmediaprocessmaintest/mock_payload.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:error typeId="APIKIT:UNSUPPORTED_MEDIA_TYPE" />
					<munit-tools:variables >
						<munit-tools:variable key="request" value="#[output application/json --- readUrl('classpath://convergedmediaprocessmaintest/mock_variable_.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://convergedmediaprocessmaintest/mock_variable_1.dwl')]" />
						<munit-tools:variable key="httpStatus" value="#[readUrl('classpath://convergedmediaprocessmaintest/mock_variable_2.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="f49ce2d1-659d-41ee-a9e7-dc8e32de32b1" >
				<munit:payload value="#[output application/json  --- readUrl('classpath://convergedmediaprocessmaintest/set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json " />
				<munit:attributes value="#[readUrl('classpath://convergedmediaprocessmaintest/set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<try doc:name="Try" doc:id="9eb73796-fa62-49cf-b2e1-a074510969e3" >
				<flow-ref doc:name="Flow-ref to converged-media-process-main" doc:id="af8f77a5-ad10-43cc-9658-8230dc14049f" name="converged-media-process-main" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="6d4e6195-c26a-4bee-b3f0-25165b3f7997" >
						<ee:transform doc:name="Transform Message" doc:id="a154db05-458d-4287-b41f-f9a5848bc2bf" >
							<ee:message >
								<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
							</ee:message>
						</ee:transform>
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="41b942e6-686b-4cc1-88e6-8c83cc75c722" actual="#[payload.result.shortMessage]" expected='#["UNSUPPORTED_MEDIA_TYPE"]' message="The payload does not match" />
		</munit:validation>
	</munit:test>
	<munit:test name="converged-media-process-any" doc:id="449ebbb5-02d2-4c57-b0fb-da761d669db5" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock APIkit Router" doc:id="7f27f028-f8b9-45c0-92fe-6b1f8609e59d" processor="apikit:router" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="8b46bcc1-8ea5-4806-a321-0d80eda7f83e" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://convergedmediaprocessmaintest/mock_payload.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:error typeId="ANY" />
					<munit-tools:variables >
						<munit-tools:variable key="request" value="#[output application/json --- readUrl('classpath://convergedmediaprocessmaintest/mock_variable_.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://convergedmediaprocessmaintest/mock_variable_1.dwl')]" />
						<munit-tools:variable key="httpStatus" value="#[readUrl('classpath://convergedmediaprocessmaintest/mock_variable_2.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="3e5dd6f6-b2fb-42c2-bab0-dfd4c264182c" >
				<munit:payload value="#[output application/json  --- readUrl('classpath://convergedmediaprocessmaintest/set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json " />
				<munit:attributes value="#[readUrl('classpath://convergedmediaprocessmaintest/set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<try doc:name="Try" doc:id="f09c5852-ced9-4c8e-ae16-05e0a4750d4f" >
				<flow-ref doc:name="Flow-ref to converged-media-process-main" doc:id="6ed25e66-f323-494b-b9de-9aeb0132ee0c" name="converged-media-process-main" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="bc87a271-90d1-4940-a194-a97d03efcc13" >
						<ee:transform doc:name="Transform Message" doc:id="3b7f40f0-ba11-4e79-90f5-3429c95e9692" >
							<ee:message >
								<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
							</ee:message>
						</ee:transform>
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="9a3c6e62-0b4c-450f-b18e-67af5dc12e47" actual="#[payload.result.shortMessage]" expected='#["ANY"]' message="The payload does not match" />
		</munit:validation>
	</munit:test>
	<munit:test name="post:\performProposalOperation-success-test" doc:id="06701a42-7f24-48f5-b3ee-2959bdd1ea36">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock implementationSub_Flow" doc:id="6267d77e-7887-4823-9015-ec40620dfac9" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="b137d595-91b3-4579-92a6-a4efc373e2ac" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://postperformProposalOperationapplicationjsonconvergedmediaprocessconfigsuccesstest/mock_payload.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="request" value="#[output application/json --- readUrl('classpath://postperformProposalOperationapplicationjsonconvergedmediaprocessconfigsuccesstest/mock_variable_.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://postperformProposalOperationapplicationjsonconvergedmediaprocessconfigsuccesstest/mock_variable_1.dwl')]" />
						<munit-tools:variable key="response" value="#[output application/json --- readUrl('classpath://postperformProposalOperationapplicationjsonconvergedmediaprocessconfigsuccesstest/mock_variable_2.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="originalPayload" value="#[output application/json --- readUrl('classpath://postperformProposalOperationapplicationjsonconvergedmediaprocessconfigsuccesstest/mock_variable_3.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="adServercodes" value="#[output application/json --- readUrl('classpath://postperformProposalOperationapplicationjsonconvergedmediaprocessconfigsuccesstest/mock_variable_4.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="token" value="#[output application/json --- readUrl('classpath://postperformProposalOperationapplicationjsonconvergedmediaprocessconfigsuccesstest/mock_variable_5.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="aeb32a6f-2627-46a8-a789-e165db9ba908" >
				<munit:payload value="#[output application/json  --- readUrl('classpath://postperformProposalOperationapplicationjsonconvergedmediaprocessconfigsuccesstest/set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json " />
				<munit:attributes value="#[readUrl('classpath://postperformProposalOperationapplicationjsonconvergedmediaprocessconfigsuccesstest/set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="request" value="#[output application/json --- readUrl('classpath://postperformProposalOperationapplicationjsonconvergedmediaprocessconfigsuccesstest/set-event_variable_.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://postperformProposalOperationapplicationjsonconvergedmediaprocessconfigsuccesstest/set-event_variable_1.dwl')]" />
				</munit:variables>
			</munit:set-event>
			<munit-tools:mock-when doc:name="mq:publish" doc:id="770ac606-bc8a-4f8e-9770-bb9c99ea38c9" processor="anypoint-mq:publish" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Anypoint_MQ_Config" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="${forwardResponse.queue}" attributeName="destination" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to post:\performProposalOperation:application\json:converged-media-process-config" doc:id="7055394a-47c5-4506-99df-678797ec6fa3" name="post:\performProposalOperation:application\json:converged-media-process-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="c5133af8-e142-43ee-addc-7310952854d7" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import postperformProposalOperationapplicationjsonconvergedmediaprocessconfigsuccesstest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="updateArchiveFunctionalTest" doc:id="46000108-7dd7-4abd-b8f7-31083d9a749b">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Request" doc:id="eb6ace89-fa76-45d7-a636-841346988e50" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="170d4f55-5251-4857-afb3-420a9d47e17e" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://proposalLineItemSubFlowtest/mock_payload.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable key="request" value="#[output application/json --- readUrl('classpath://proposalLineItemSubFlowtest/mock_variable_.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="lineItemsbyAdServerCode" value="#[output application/json --- readUrl('classpath://proposalLineItemSubFlowtest/mock_variable_1.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="proposalLineItemRequest" value="#[output application/json --- readUrl('classpath://proposalLineItemSubFlowtest/mock_variable_2.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://proposalLineItemSubFlowtest/mock_variable_3.dwl')]" />
						<munit-tools:variable key="method" value="#[output application/json --- readUrl('classpath://proposalLineItemSubFlowtest/mock_variable_4.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="adServerCodeInfo" value="#[output application/json --- readUrl('classpath://proposalLineItemSubFlowtest/mock_variable_5.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="shortSample" value="#[output application/json --- readUrl('classpath://proposalLineItemSubFlowtest/mock_variable_6.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="dwlFileName" value="#[output application/json --- readUrl('classpath://proposalLineItemSubFlowtest/mock_variable_7.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="originalPayload" value="#[output application/json --- readUrl('classpath://proposalLineItemSubFlowtest/mock_variable_8.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="adServerCode" value="#[output application/json --- readUrl('classpath://proposalLineItemSubFlowtest/mock_variable_9.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="distinctLineItemAction" value="#[output application/json --- readUrl('classpath://proposalLineItemSubFlowtest/mock_variable_10.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="adServercodes" value="#[output application/json --- readUrl('classpath://proposalLineItemSubFlowtest/mock_variable_11.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="proposalLineItemResponse" value="#[output application/json --- readUrl('classpath://proposalLineItemSubFlowtest/mock_variable_12.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="token" value="#[output application/json --- readUrl('classpath://proposalLineItemSubFlowtest/mock_variable_13.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="proposalId" value="#[output application/json --- readUrl('classpath://proposalLineItemSubFlowtest/mock_variable_14.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="path" value="#[output application/json --- readUrl('classpath://proposalLineItemSubFlowtest/mock_variable_15.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="stepWiseResult" value="#[output application/json --- readUrl('classpath://proposalLineItemSubFlowtest/mock_variable_16.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="response" value="#[output application/json --- readUrl('classpath://proposalLineItemSubFlowtest/mock_variable_17.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="proposalRequest" value="#[output application/json --- readUrl('classpath://proposalLineItemSubFlowtest/mock_variable_18.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Request1" doc:id="60ff5364-7bee-4d2d-bf6e-60ace9e7b597" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="7cee542c-25e1-4aa2-bc20-e9039e55f462" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://proposalLineItemSubFlowtest/mock_payload.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="request" value="#[output application/json --- readUrl('classpath://proposalLineItemSubFlowtest/mock_variable_.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="lineItemsbyAdServerCode" value="#[output application/json --- readUrl('classpath://proposalLineItemSubFlowtest/mock_variable_1.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://proposalLineItemSubFlowtest/mock_variable_3.dwl')]" />
						<munit-tools:variable key="method" value="#[output application/json --- readUrl('classpath://proposalLineItemSubFlowtest/mock_variable_4.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="proposalLineItemResponse" value="#[output application/json --- readUrl('classpath://proposalLineItemSubFlowtest/mock_variable_12.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="stepWiseResult" value="#[output application/json --- readUrl('classpath://proposalLineItemSubFlowtest/mock_variable_16.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock APIkit Router" doc:id="7f47c285-094d-475b-aa5a-e1d2eb50542a" processor="apikit:router">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="8b46bcc1-8ea5-4806-a321-0d80eda7f83e" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://convergedmediaprocessmaintest1/mock_payload.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable key="request" value="#[output application/json --- readUrl('classpath://convergedmediaprocessmaintest1/mock_variable_.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://convergedmediaprocessmaintest1/mock_variable_1.dwl')]" />
						<munit-tools:variable key="httpStatus" value="#[readUrl('classpath://convergedmediaprocessmaintest1/mock_variable_2.dwl')]" />
						<munit-tools:variable key="response" value="#[output application/json --- readUrl('classpath://convergedmediaprocessmaintest1/mock_variable_3.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="stepWiseResult" value="#[output application/java --- readUrl('classpath://convergedmediaprocessmaintest1/mock_variable_4.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="originalPayload" value="#[output application/json --- readUrl('classpath://convergedmediaprocessmaintest1/mock_variable_5.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="adServercodes" value="#[output application/json --- readUrl('classpath://convergedmediaprocessmaintest1/mock_variable_6.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="token" value="#[output application/json --- readUrl('classpath://convergedmediaprocessmaintest1/mock_variable_7.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>

				<munit-tools:then-call flow="post:\performProposalOperation:application\json:converged-media-process-config" />
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="ddf4a8e1-d4e5-49fe-a339-5d1998284b3e" >
				<munit:payload value="#[output application/json  --- readUrl('classpath://implementationSubFlowtest1/set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json " />
				<munit:attributes value="#[readUrl('classpath://implementationSubFlowtest1/set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="request" value="#[output application/json --- readUrl('classpath://implementationSubFlowtest1/set-event_variable_.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://implementationSubFlowtest1/set-event_variable_1.dwl')]" />
				</munit:variables>
			</munit:set-event>
			<munit-tools:mock-when doc:name="mq:publish" doc:id="09951b81-7da8-4609-9c84-f69b8a5ce41a" processor="anypoint-mq:publish" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Anypoint_MQ_Config" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="${forwardResponse.queue}" attributeName="destination" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to converged-media-process-main" doc:id="58b32926-a920-4371-9784-48b092e04618" name="converged-media-process-main" />
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="fe3d456c-06d8-4003-8561-b1b3b32e80f7" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import implementationSubFlowtest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
</mule>
